var tipuesearch = {"pages": [{'title': '迴圈程式', 'text': "\n \n 自評表 \n \n \n \n Gits： https://gist.github.com/40823142/7aceb9ac07a39022294159603d20fc0a \n Dartpad： https://mde.tw/dartpad/?id=7aceb9ac07a39022294159603d20fc0a \n 原始碼： \n \n void main() {\n  for (var i = 0; i < 11; i++) {\n    print('hello $i');\n  }\n  print('hello ⣼⡿⢋⣭⣤⣬⣉⠛⢷⡜⣿⣿⣿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⡿⢟⣛⣩⣭⣟⡻');\n  print('hello ⣿⠁⣿⣿⣿⡿⠛⣁⣼⣿⣶⣶⣶⣾⣿⣿⣿⣶⣶⣦⣭⣍⠁⠺⣿⠛⣉⣭⣥⡙');\n  print('hello ⣿⡄⠿⢋⣡⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡚⢿⣿⣿⣿');\n  print('hello ⠹⠛⣲⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡙⣟⣽');\n  print('hello ⣣⣾⣿⣿⣿⣿⣿⡿⠟⣛⣛⡛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡌⣡');\n  print('hello ⣿⣿⣿⣿⣿⣿⠏⣰⣿⣿⣿⡿⣷⡹⣿⣿⣿⣿⣿⣿⣿⣿⠿⣋⣽⣿⣭⡹⣷⢹');\n  print('hello ⣿⣿⣿⣿⣿⣿⠄⣿⣿⣿⠄⠄⠄⡇⣿⣿⣿⣿⣿⣿⣿⠇⣾⣿⣿⠟⠛⠻⡞⡏');\n  print('hello ⣿⣿⣿⣿⣿⣿⣆⠙⢿⣿⣷⣶⡶⣱⣿⣿⣿⣿⣿⣿⣿⡀⣿⣿⣿⠄⠄⠄⡇⣇');\n  print('hello ⣿⣿⣿⣿⣿⣿⣿⣿⣦⡬⢉⣐⣾⣿⣿⣿⡿⠿⢿⣿⣿⣷⣬⡛⠿⠿⠖⣋⣼⣿');\n  print('hello ⣿⣿⣿⣿⣿⣿⣿⣿⡟⢰⣿⣿⣿⣿⣿⠁⠄⠄⠄⢸⣿⣿⣤⡙⣿⣿⣿⣿⣿⣿');\n  print('hello ⣿⣿⣿⣿⣿⣿⣿⣿⣇⠸⣿⣿⣿⣿⣿⡷⠤⢤⣤⣾⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿');\n  print('hello ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⠄⣤⢠⣴⣶⣷⣦⣤⣙⠛⢛⣋⣴⣿⣿⣿⣿⣿⣿');\n  print('hello ⢿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⠄⣿⡘⣿⣿⣿⣿⠟⣿⢠⣿⣿⡿⣿⣿⡟⢻⣿⢏');\n  print('hello ⠈⠟⣡⠙⠟⣹⣿⣿⣿⣿⣿⣇⠹⣧⣙⠿⢿⣿⣶⠇⣾⣿⣿⡇⢹⠏⣡⡘⡟⠸');\n  print('hello ⣧⣾⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣧⣈⠛⠛⠿⢟⣡⣾⣿⣿⣿⣿⣤⣾⣿⣷⣶⣿');\n  print('---------------------------------------------------');\n  print('⠄⠄⠄⠄⠄⠄⠄⠈⠉⠁⠈⠉⠉⠙⠿⣿⣿⣿⣿⣿');\n  print('⠄⠄⠄⠄⠄⠄⠄⠄⣀⣀⣀⠄⠄⠄⠄⠄⠹⣿⣿⣿');\n  print('⠄⠄⠄⠄⠄⢐⣲⣿⣿⣯⠭⠉⠙⠲⣄⡀⠄⠈⢿⣿');\n  print('⠐⠄⠄⠰⠒⠚⢩⣉⠼⡟⠙⠛⠿⡟⣤⡳⡀⠄⠄⢻');\n  print('⠄⠄⢀⣀⣀⣢⣶⣿⣦⣭⣤⣭⣵⣶⣿⣿⣏⠄⠄⣿');\n  print('⠄⣼⣿⣿⣿⡉⣿⣀⣽⣸⣿⣿⣿⣿⣿⣿⣿⡆⣀⣿');\n  print('⢠⣿⣿⣿⠿⠟⠛⠻⢿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣼');\n  print('⠄⣿⣿⣿⡆⠄⠄⠄⠄⠳⡈⣿⣿⣿⣿⣿⣿⣿⣿⣿');\n  print('⠄⢹⣿⣿⡇⠄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿');\n  print('⠄⢹⣿⣿⡇⠄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿');\n  print('⠄⠄⢿⣿⣷⣨⣽⣭⢁⣡⣿⣿⠟⣩⣿⣿⣿⠿⠿⠟');\n  print('⠄⠄⠈⡍⠻⣿⣿⣿⣿⠟⠋⢁⣼⠿⠋⠉⠄⠄⠄⠄');\n  print('⠄⠄⠄⠈⠴⢬⣙⣛⡥⠴⠂⠄⠄⠄⠄⠄⠄⠄⠄⠄');\n\n  \n\n} \n \n \n", 'tags': '', 'url': '迴圈程式.html'}, {'title': '練習Dartpad', 'text': '\n', 'tags': '', 'url': '練習Dartpad.html'}, {'title': 'Loop', 'text': '\n', 'tags': '', 'url': 'Loop.html'}, {'title': '第七周 微分方程式', 'text': 'Gits： https://gist.github.com/40823142/3ee5ccb9a812092694f5e2ddab7c06b1 \n // 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式\n// 設 t 為時間, x 則設為物體的位移\n// 假設要解 F=ma 的單一質量加上彈簧 (常數為 k) 與黏滯阻尼 (常數為 b)\n// f 為沿位移方向的施力\n// dx/dt = v, dv/dt = (f-kx-bv)/m\n// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值\n//\n// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以\n// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x\n// 定義函式 rungeKutta, 共有四個輸入變數\n// 物體質量\nconst num m = 1;\n// 對質量的施力 f\nconst num f = 0.0;\n// 彈簧係數\nconst num k = 1;\n// 阻尼係數\nconst num b = 1;\n\n// 呼叫運算時, 需要起始時間, 終點時間, 位移起始值與速度起始值, 增量 h\nrungeKutta(t0, x0, v0, t, h) {\n  // 利用步階增量值 h 與 t 的起始及終點值\n  // 計算需要迭代的次數 n\n  int n = ((t - t0) / h).toInt();\n  // 宣告 x 為雙浮點數, 且設為起始值 x0\n  double x = x0;\n  // 宣告 v 為雙浮點數, 且設為起始值 v0\n  double v = v0;\n  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值\n  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n\n    print("t: ${t0.toStringAsFixed(3)}, x: ${x.toStringAsFixed(3)}, v: ${v.toStringAsFixed(3)}");\n  for (int i = 1; i <= n; i++) {\n    // 將此階段的 t 與 x 值代入 dxdt 與 dvdt 函式求下列四個浮點變數值\n    // 因為必須兩個函式耦合, 必須同時計算\n    double xk1 = h * dxdt(t0, x, v);\n    double vk1 = h * dvdt(t0, x, v);\n    double xk2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * xk1, v + 0.5 * vk1);\n    double vk2 = h * dvdt(t0 + 0.5 * h, x + 0.5 * xk1, v + 0.5 * vk1);\n    double xk3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * xk2, v + 0.5 * vk2);\n    double vk3 = h * dvdt(t0 + 0.5 * h, x + 0.5 * xk2, v + 0.5 * vk2);\n    double xk4 = h * dxdt(t0 + h, x + xk3, v + vk3);\n    double vk4 = h * dvdt(t0 + h, x + xk3, v + vk3);\n    // 利用上述四個變數值求此步階增量後的對應 x 值\n    x = x + (1.0 / 6.0) * (xk1 + 2 * xk2 + 2 * xk3 + xk4);\n    v = v + (1.0 / 6.0) * (vk1 + 2 * vk2 + 2 * vk3 + vk4);\n    // 只列到小數點第三位\n    print("t: ${t0.toStringAsFixed(3)}, x: ${x.toStringAsFixed(3)}, v: ${v.toStringAsFixed(3)}");\n    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值\n    // t 起始值配合步階增量值 h, 進行增量\n    t0 = t0 + h;\n  }\n  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值\n  return [x, v];\n}\n\n// 將微分方程式 "dx / dt = v" 定義為 dxdt 函式\ndxdt(t, x, v) {\n  return v;\n}\n// dx/dt = v, dv/dt = (f-kx-bv)/m\ndvdt(t,x, v) {\n  return (f - k*x - b*v)/m;\n}\n\n// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式\n// 解常微分方程式\nmain() {\n// Driver method\n// num 資料型別可以是整數或雙浮點數\n  num t0 = 0;\n  num x0 = 1;\n  num v0 = 0;\n  num t = 20;\n  double h = 0.1;\n  rungeKutta(t0, x0, v0, t, h);\n} \n \n \n \n \n \n Gits： https://gist.github.com/40823142/0b1d1fbe4acff3ee77816ee0179d6dd4 \n // 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式\n// 設 t 為時間, x 則設為物體的位移\n// 假設要解 F=ma 的單一質量加上彈簧 (常數為 k) 與黏滯阻尼 (常數為 b)\n// f 為沿位移方向的施力\n// dx/dt = v, dv/dt = (f-kx-bv)/m\n// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值\n//\n// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以\n// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x\n// 定義函式 rungeKutta, 共有四個輸入變數\n// 物體質量\nconst num m = 1;\n// 對質量的施力 f\nconst num f = 0.0;\n// 彈簧係數\nconst num k = 1;\n// 阻尼係數\nconst num b = 0;\n\n// 呼叫運算時, 需要起始時間, 終點時間, 位移起始值與速度起始值, 增量 h\nrungeKutta(t0, x0, v0, t, h) {\n  // 利用步階增量值 h 與 t 的起始及終點值\n  // 計算需要迭代的次數 n\n  int n = ((t - t0) / h).toInt();\n  // 宣告 x 為雙浮點數, 且設為起始值 x0\n  double x = x0;\n  // 宣告 v 為雙浮點數, 且設為起始值 v0\n  double v = v0;\n  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值\n  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n\n    print("t: ${t0.toStringAsFixed(3)}, x: ${x.toStringAsFixed(3)}, v: ${v.toStringAsFixed(3)}");\n  for (int i = 1; i <= n; i++) {\n    // 將此階段的 t 與 x 值代入 dxdt 與 dvdt 函式求下列四個浮點變數值\n    // 因為必須兩個函式耦合, 必須同時計算\n    double xk1 = h * dxdt(t0, x, v);\n    double vk1 = h * dvdt(t0, x, v);\n    double xk2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * xk1, v + 0.5 * vk1);\n    double vk2 = h * dvdt(t0 + 0.5 * h, x + 0.5 * xk1, v + 0.5 * vk1);\n    double xk3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * xk2, v + 0.5 * vk2);\n    double vk3 = h * dvdt(t0 + 0.5 * h, x + 0.5 * xk2, v + 0.5 * vk2);\n    double xk4 = h * dxdt(t0 + h, x + xk3, v + vk3);\n    double vk4 = h * dvdt(t0 + h, x + xk3, v + vk3);\n    // 利用上述四個變數值求此步階增量後的對應 x 值\n    x = x + (1.0 / 6.0) * (xk1 + 2 * xk2 + 2 * xk3 + xk4);\n    v = v + (1.0 / 6.0) * (vk1 + 2 * vk2 + 2 * vk3 + vk4);\n    // 只列到小數點第三位\n    print("t: ${t0.toStringAsFixed(3)}, x: ${x.toStringAsFixed(3)}, v: ${v.toStringAsFixed(3)}");\n    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值\n    // t 起始值配合步階增量值 h, 進行增量\n    t0 = t0 + h;\n  }\n  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值\n  return [x, v];\n}\n\n// 將微分方程式 "dx / dt = v" 定義為 dxdt 函式\ndxdt(t, x, v) {\n  return v;\n}\n// dx/dt = v, dv/dt = (f-kx-bv)/m\ndvdt(t,x, v) {\n  return (f - k*x - b*v)/m;\n}\n\n// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式\n// 解常微分方程式\nmain() {\n// Driver method\n// num 資料型別可以是整數或雙浮點數\n  num t0 = 0;\n  num x0 = 1;\n  num v0 = 0;\n  num t = 20;\n  double h = 0.1;\n  rungeKutta(t0, x0, v0, t, h);\n} \n \n \xa0 \n \n', 'tags': '', 'url': '第七周 微分方程式.html'}, {'title': '亂數分組程式', 'text': '\n Gits： https://gist.github.com/40823142/?id=80e449253df1db9c272fdb36dcd0aa55 \n Dartpad： https://mde.tw/dartpad/?id=80e449253df1db9c272fdb36dcd0aa55 \n 原始碼： \n import \'dart:html\';\n\nvoid main() {\n  // 每一組 10 人\n  int num = 10;\n  // 組序由 1 開始\n  int gth = 1;\n  // 迴圈序號變數\n  int i;\n  // 每組學員暫存數列\n  var gp_list = [];\n  // 全班分組數列\n  var cp2019 = [];\n\n  HttpRequest.getString(\n          \'https://mde.tw/cp2019/downloads/2019fall_cp_1a_list.txt\')\n      .then((String resp) {\n    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \\n 轉為數列\n    var stud_list = resp.trim().split("\\n");\n    // 數列利用 shuffle() 方法以隨機方法弄亂順序\n    stud_list.shuffle();\n    // 逐一讀取已經弄亂的學生學號數列, 利用模數運算每幾人分成一組\n    for (i = 0; i < stud_list.length; i++) {\n      // 0, 1~(num-1), num\n      if (i % num == 0) {\n        gp_list = [];\n        // 列印區隔符號\n        print(\'=\' * 20);\n        print("group $gth :");\n        print(stud_list[i]);\n        // 在各分組數列中加入將對應的學員學號\n        gp_list.add(stud_list[i]);\n        gth = gth + 1;\n      } else {\n        print(stud_list[i]);\n        // 在各分組數列中加入將對應的學員學號\n        gp_list.add(stud_list[i]);\n      }\n      if (i % num == 0) {\n        // 逐步將各組暫存的分組數列加入全班分組數列中\n        cp2019.add(gp_list);\n      }\n    }\n    // 列出全班分組數列\n    print(cp2019);\n  });\n} \n \n \n \n', 'tags': '', 'url': '亂數分組程式.html'}, {'title': 'Hello world', 'text': '\n \n \n \n', 'tags': '', 'url': 'Hello world.html'}, {'title': '第十周----華攝氏轉換', 'text': '\n 攝氏轉華氏： \n \n 華氏轉攝氏： \n', 'tags': '', 'url': '第十周----華攝氏轉換.html'}, {'title': '第十二周作業----偵測按鈕', 'text': '\n \n \n  取 Dart 程式的按鈕  \n 華攝氏徵測轉換 \n  內建放入的 Dart 原始碼  \n 放大   回復 \n \n', 'tags': '', 'url': '第十二周作業----偵測按鈕.html'}, {'title': '想看貓貓的點進來啦', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '想看貓貓的點進來啦.html'}]};